
import java.awt.Color;
import java.awt.Frame;
import java.awt.GraphicsEnvironment;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Usuario
 */
public class Servidor extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form Servidor
     */
    public Servidor() {
        initComponents();
        Thread t=new Thread(this);
        t.start();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        conectados = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        control = new javax.swing.JTextArea();
        barra = new javax.swing.JPanel();
        btncerrar = new javax.swing.JButton();
        btnmin = new javax.swing.JButton();
        btnmax = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servidor");
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Conectados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setOpaque(false);

        conectados.setBackground(new java.awt.Color(51, 51, 51));
        conectados.setColumns(20);
        conectados.setForeground(new java.awt.Color(255, 255, 255));
        conectados.setRows(5);
        jScrollPane1.setViewportView(conectados);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Control", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jScrollPane2.setOpaque(false);

        control.setBackground(new java.awt.Color(51, 51, 51));
        control.setColumns(20);
        control.setForeground(new java.awt.Color(255, 255, 255));
        control.setRows(5);
        jScrollPane2.setViewportView(control);

        barra.setBackground(new java.awt.Color(26, 26, 33));
        barra.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                barraMouseDragged(evt);
            }
        });
        barra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                barraMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                barraMousePressed(evt);
            }
        });

        btncerrar.setBackground(new java.awt.Color(26, 26, 33));
        btncerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cross-out-blanco.png"))); // NOI18N
        btncerrar.setBorder(null);
        btncerrar.setBorderPainted(false);
        btncerrar.setContentAreaFilled(false);
        btncerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btncerrar.setOpaque(true);
        btncerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btncerrarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btncerrarMouseExited(evt);
            }
        });
        btncerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncerrarActionPerformed(evt);
            }
        });

        btnmin.setBackground(new java.awt.Color(26, 26, 33));
        btnmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/minus-horizontal-straight-line-blanco.png"))); // NOI18N
        btnmin.setBorder(null);
        btnmin.setBorderPainted(false);
        btnmin.setContentAreaFilled(false);
        btnmin.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnmin.setOpaque(true);
        btnmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnminMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnminMouseExited(evt);
            }
        });
        btnmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnminActionPerformed(evt);
            }
        });

        btnmax.setBackground(new java.awt.Color(26, 26, 33));
        btnmax.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/multi-tab-blanco.png"))); // NOI18N
        btnmax.setBorder(null);
        btnmax.setBorderPainted(false);
        btnmax.setContentAreaFilled(false);
        btnmax.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnmax.setOpaque(true);
        btnmax.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnmaxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnmaxMouseExited(evt);
            }
        });
        btnmax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmaxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout barraLayout = new javax.swing.GroupLayout(barra);
        barra.setLayout(barraLayout);
        barraLayout.setHorizontalGroup(
            barraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, barraLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnmin, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnmax, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btncerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        barraLayout.setVerticalGroup(
            barraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btncerrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnmin, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
            .addComponent(btnmax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(barra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(barra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btncerrarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btncerrarMouseEntered
        btncerrar.setBackground(new Color(232, 17, 35));
    }//GEN-LAST:event_btncerrarMouseEntered

    private void btncerrarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btncerrarMouseExited
        btncerrar.setBackground(new Color(26, 26, 33));
    }//GEN-LAST:event_btncerrarMouseExited

    private void btncerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncerrarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btncerrarActionPerformed

    private void btnminMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnminMouseEntered
        btnmin.setBackground(new Color(152, 152, 152));
    }//GEN-LAST:event_btnminMouseEntered

    private void btnminMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnminMouseExited
        btnmin.setBackground(new Color(26, 26, 33));
    }//GEN-LAST:event_btnminMouseExited

    private void btnminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnminActionPerformed
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_btnminActionPerformed

    private void btnmaxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnmaxMouseEntered
        btnmax.setBackground(new Color(152, 152, 152));
    }//GEN-LAST:event_btnmaxMouseEntered

    private void btnmaxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnmaxMouseExited
        btnmax.setBackground(new Color(26, 26, 33));
    }//GEN-LAST:event_btnmaxMouseExited

    private void btnmaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmaxActionPerformed
        if(maximizado==false){
            Servidor.this.setExtendedState(JFrame.MAXIMIZED_BOTH);
            GraphicsEnvironment env=GraphicsEnvironment.getLocalGraphicsEnvironment();
            Servidor.this.setMaximizedBounds(env.getMaximumWindowBounds());
            maximizado=true;
        }else{
            setExtendedState(JFrame.NORMAL);
            maximizado=false;
        }
    }//GEN-LAST:event_btnmaxActionPerformed

    private void barraMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barraMouseDragged
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();

        this.setLocation(x-mousex,y-mousey);
    }//GEN-LAST:event_barraMouseDragged

    private void barraMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barraMouseEntered

    }//GEN-LAST:event_barraMouseEntered

    private void barraMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barraMousePressed
        mousex=evt.getX();
        mousey=evt.getY();
    }//GEN-LAST:event_barraMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Servidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barra;
    private javax.swing.JButton btncerrar;
    private javax.swing.JButton btnmax;
    private javax.swing.JButton btnmin;
    private javax.swing.JTextArea conectados;
    private javax.swing.JTextArea control;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    private int mousex,mousey;
    private boolean maximizado=false;

    
    
    public void run() {
        try {
            ServerSocket ss=new ServerSocket(9999);
            String mensaje,nick,ipamandar,myip;
            HashMap <String,String> personasmapa=new HashMap<String,String>();
            paquete paqueterecibido;
            
            while(true){
            //Entrada de datos------------------------------------------------------------------------------
            Socket socketrecibido=ss.accept();
            ObjectInputStream entrada=new ObjectInputStream(socketrecibido.getInputStream());
            paqueterecibido=(paquete) entrada.readObject();
            
            mensaje=paqueterecibido.getMensaje();
            nick=paqueterecibido.getNick();
            myip=paqueterecibido.getMyip();
            ipamandar=paqueterecibido.getIp();
            
            if(mensaje.equals("usuarioconectado")){
                personasmapa.put(nick, myip);
                paqueterecibido.setPersonasmapa(personasmapa);
                
                for (Map.Entry <String,String>i: personasmapa.entrySet()){
                    String ip=i.getValue();
                    Socket socketsalida=new Socket(ip,9090);
                    ObjectOutputStream salidaobjetos=new ObjectOutputStream(socketsalida.getOutputStream());
                    salidaobjetos.writeObject(paqueterecibido);
                    
                    salidaobjetos.close();
                    socketrecibido.close();
                    entrada.close();
                    socketsalida.close();
                }
            }if(mensaje.equals("usuariodesconectado")){
               
                personasmapa.remove(nick,myip);
                paqueterecibido.setPersonasmapa(personasmapa);
                
                for (Map.Entry <String,String>i: personasmapa.entrySet()){
                    String ip=i.getValue();
                    Socket socketsalida=new Socket(ip,9090);
                    ObjectOutputStream salidaobjetos=new ObjectOutputStream(socketsalida.getOutputStream());
                    salidaobjetos.writeObject(paqueterecibido);
                    conectados.append("("+ip+")"+i.getKey()+"\n");
                    
                    salidaobjetos.close();
                    socketrecibido.close();
                    entrada.close();
                    socketsalida.close();
                }
                
                
            }if(!mensaje.equals("usuarioconectado")){
                control.append("("+myip+")" +nick+":"+mensaje+"\n");
                //Salida de datos------------------------------------------------------------------------------
                paqueterecibido.setPersonasmapa(personasmapa);
                Socket socketsalida=new Socket(ipamandar,9090);
                ObjectOutputStream salidaobjetos=new ObjectOutputStream(socketsalida.getOutputStream());
                salidaobjetos.writeObject(paqueterecibido);

                salidaobjetos.close();
                socketrecibido.close();
                entrada.close();
                socketsalida.close();
            }
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    
}




